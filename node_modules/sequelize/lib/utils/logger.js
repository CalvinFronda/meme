'use strict';

/**
 * Sequelize module for debug and deprecation messages.
 * It require a `context` for which messages will be printed.
 *
 * @module logging
 * @private
 */

<<<<<<< HEAD
const depd = require('depd'),
  debug = require('debug'),
  _ = require('lodash');
=======
const debug = require('debug');
const util = require('util');
>>>>>>> 5214b58b8509a187fd89faa6656d6c83be0724dd

class Logger {
  constructor(config) {

<<<<<<< HEAD
    this.config = _.extend({
      context: 'sequelize',
      debug: true
    }, config || {});

    this.depd = depd(this.config.context);
    this.debug = debug(this.config.context);
  }

  deprecate(message) {
    this.depd(message);
  }

  debug(message) {
    this.config.debug && this.debug(message);
  }

  warn(message) {
    console.warn(`(${this.config.context}) Warning: ${message}`);
  }

  debugContext(childContext) {
    if (!childContext) {
      throw new Error('No context supplied to debug');
    }
    return debug([this.config.context, childContext].join(':'));
  }
}

module.exports = Logger;
=======
    this.config = Object.assign({
      context: 'sequelize',
      debug: true
    }, config);
  }

  warn(message) {
    // eslint-disable-next-line no-console
    console.warn(`(${this.config.context}) Warning: ${message}`);
  }

  inspect(value) {
    return util.inspect(value, false, 3);
  }

  debugContext(name) {
    return debug(`${this.config.context}:${name}`);
  }
}

exports.logger = new Logger();

exports.Logger = Logger;
>>>>>>> 5214b58b8509a187fd89faa6656d6c83be0724dd
